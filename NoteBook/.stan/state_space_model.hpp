
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace state_space_model_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 21> locations_array__ = 
{" (found before start of program)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 7, column 2 to column 15)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 8, column 2 to column 19)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 9, column 2 to column 21)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 10, column 2 to column 25)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 11, column 2 to column 20)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 15, column 2 to column 19)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 16, column 2 to column 30)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 17, column 2 to column 23)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 19, column 4 to column 46)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 18, column 2 to line 19, column 46)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 23, column 2 to column 37)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 24, column 2 to column 39)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 25, column 2 to column 25)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 2, column 2 to column 8)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 3, column 9 to column 10)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 3, column 2 to column 14)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 7, column 9 to column 10)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 8, column 9 to column 10)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 15, column 9 to column 10)",
 " (in '/home/takato/NoteBook/stan/pr_cmdstan/NoteBook/.stan/state_space_model.stan', line 16, column 9 to column 12)"};



class state_space_model_model final : public model_base_crtp<state_space_model_model> {

 private:
  int T;
  Eigen::Matrix<double, -1, 1> Y__;
  int sum_part_season_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> Y{nullptr, 0};
 
 public:
  ~state_space_model_model() { }
  
  inline std::string model_name() const final { return "state_space_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  state_space_model_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "state_space_model_model_namespace::state_space_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 15;
      validate_non_negative_index("Y", "T", T);
      current_statement__ = 16;
      context__.validate_dims("data initialization","Y","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      Y__ = Eigen::Matrix<double, -1, 1>(T);
      new (&Y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(Y__.data(), T);
      
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 16;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 16;
          assign(Y, Y_flat__[(pos__ - 1)],
            "assigning variable Y", index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      validate_non_negative_index("mu", "T", T);
      current_statement__ = 18;
      validate_non_negative_index("season", "T", T);
      current_statement__ = 19;
      validate_non_negative_index("y_mean", "T", T);
      current_statement__ = 20;
      sum_part_season_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      sum_part_season_1dim__ = (T - 3);
      current_statement__ = 20;
      validate_non_negative_index("sum_part_season", "T - 3",
                                  sum_part_season_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = T + T + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "state_space_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(T);
      Eigen::Matrix<local_scalar_t__, -1, 1> season;
      season = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(season, DUMMY_VAR__);
      
      current_statement__ = 2;
      season = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(T);
      local_scalar_t__ s_mu;
      s_mu = DUMMY_VAR__;
      
      current_statement__ = 3;
      s_mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ s_season;
      s_season = DUMMY_VAR__;
      
      current_statement__ = 4;
      s_season = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                   0, lp__);
      local_scalar_t__ s_Y;
      s_Y = DUMMY_VAR__;
      
      current_statement__ = 5;
      s_Y = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_mean;
      y_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(y_mean, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sum_part_season;
      sum_part_season = Eigen::Matrix<local_scalar_t__, -1, 1>(sum_part_season_1dim__);
      stan::math::fill(sum_part_season, DUMMY_VAR__);
      
      current_statement__ = 8;
      assign(y_mean, add(mu, season), "assigning variable y_mean");
      current_statement__ = 10;
      for (int t = 4; t <= T; ++t) {
        current_statement__ = 9;
        assign(sum_part_season,
          sum(rvalue(season, "season", index_min_max((t - 3), t))),
          "assigning variable sum_part_season", index_uni((t - 3)));
      }
      {
        current_statement__ = 11;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu, "mu", index_min_max(2, T)),
            rvalue(mu, "mu", index_min_max(1, (T - 1))), s_mu));
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(sum_part_season, 0, s_season));
        current_statement__ = 13;
        lp_accum__.add(normal_lpdf<propto__>(Y, y_mean, s_Y));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "state_space_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(T);
      Eigen::Matrix<double, -1, 1> season;
      season = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(season, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      season = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(T);
      double s_mu;
      s_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      s_mu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double s_season;
      s_season = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      s_season = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                   0, lp__);
      double s_Y;
      s_Y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      s_Y = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      Eigen::Matrix<double, -1, 1> y_mean;
      y_mean = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(y_mean, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sum_part_season;
      sum_part_season = Eigen::Matrix<double, -1, 1>(sum_part_season_1dim__);
      stan::math::fill(sum_part_season, std::numeric_limits<double>::quiet_NaN());
      
      
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(season[(sym1__ - 1)]);
      }
      vars__.emplace_back(s_mu);
      vars__.emplace_back(s_season);
      vars__.emplace_back(s_Y);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      assign(y_mean, add(mu, season), "assigning variable y_mean");
      current_statement__ = 10;
      for (int t = 4; t <= T; ++t) {
        current_statement__ = 9;
        assign(sum_part_season,
          sum(rvalue(season, "season", index_min_max((t - 3), t))),
          "assigning variable sum_part_season", index_uni((t - 3)));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          vars__.emplace_back(y_mean[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= sum_part_season_1dim__; ++sym1__) {
          vars__.emplace_back(sum_part_season[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 1;
          assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> season;
      season = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(season, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> season_flat__;
        current_statement__ = 2;
        season_flat__ = context__.vals_r("season");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 2;
          assign(season, season_flat__[(pos__ - 1)],
            "assigning variable season", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      double s_mu;
      s_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      s_mu = context__.vals_r("s_mu")[(1 - 1)];
      double s_mu_free__;
      s_mu_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      s_mu_free__ = stan::math::lb_free(s_mu, 0);
      double s_season;
      s_season = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      s_season = context__.vals_r("s_season")[(1 - 1)];
      double s_season_free__;
      s_season_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      s_season_free__ = stan::math::lb_free(s_season, 0);
      double s_Y;
      s_Y = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      s_Y = context__.vals_r("s_Y")[(1 - 1)];
      double s_Y_free__;
      s_Y_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      s_Y_free__ = stan::math::lb_free(s_Y, 0);
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(season[(sym1__ - 1)]);
      }
      vars__.emplace_back(s_mu_free__);
      vars__.emplace_back(s_season_free__);
      vars__.emplace_back(s_Y_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "season", "s_mu", "s_season",
      "s_Y", "y_mean", "sum_part_season"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(T)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(T)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(T)},
      std::vector<size_t>{static_cast<size_t>(sum_part_season_1dim__)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "season" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "s_mu");
    param_names__.emplace_back(std::string() + "s_season");
    param_names__.emplace_back(std::string() + "s_Y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sum_part_season_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sum_part_season" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "season" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "s_mu");
    param_names__.emplace_back(std::string() + "s_season");
    param_names__.emplace_back(std::string() + "s_Y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_mean" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= sum_part_season_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sum_part_season" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"season\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"s_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_season\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_Y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sum_part_season\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sum_part_season_1dim__) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"season\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"parameters\"},{\"name\":\"s_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_season\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s_Y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_mean\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sum_part_season\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sum_part_season_1dim__) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = state_space_model_model_namespace::state_space_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return state_space_model_model_namespace::profiles__;
}

#endif


